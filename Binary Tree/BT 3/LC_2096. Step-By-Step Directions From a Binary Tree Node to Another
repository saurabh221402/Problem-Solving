######################################################################################################### 
T.C :O(3*N)
S.C :O(H)

class Solution {
public:
//finding lca point
    TreeNode* LCA(TreeNode* root, int p, int q) {
        if (!root || root->val == p || root->val == q) return root;
        
        TreeNode* left = LCA(root->left, p, q);
        TreeNode* right = LCA(root->right, p, q);
        
        if (left && right) return root;
        return (left != NULL) ? left : right;
    }
//step-by-step direction from source to lca
    bool solve_s(TreeNode* r,int x,string &s)
    {
        if(!r)return 0;
        if(r->val==x||solve_s(r->left,x,s)||solve_s(r->right,x,s))
        {
            s+="U";
            return 1;
        }
        return 0;
    }
//step-by-step direction from lca to destination
    bool solve_d(TreeNode* r,int x,string &s)
    {
        if(!r)return 0;
        if(r->val==x)
        { 
            return 1;
        }
        if(solve_d(r->left,x,s))
        {
            s+="L";
            return 1;
        }
        if(solve_d(r->right,x,s))
        {
            s+="R";
            return 1;
        }
        return 0;
    }
    string getDirections(TreeNode* root, int s, int d) {
        TreeNode* lca=LCA(root,s,d);
        string source="";
        solve_s(lca,s,source);
        string des="";
        source.pop_back();
        solve_d(lca,d,des);
        reverse(des.begin(),des.end());
        string ans=source+des;
        return ans;
    }
};









#########################################################################################################
//solution based on similar question
class Solution {
public:
    bool solve(TreeNode* root, int x,vector<int>& v)
    {
        if(!root)return 0;
        if(root->val==x){v.push_back(root->val);return 1;}
        bool root_left=solve(root->left,x,v);
        if(root_left){v.push_back(root->val);return 1;}
        bool root_right=solve(root->right,x,v);
        if(root_right){v.push_back(root->val);return 1;}

        return 0;
    }
    string getDirections(TreeNode* root, int p, int q) {
        vector<int> v1,v2;
        string ans="";
        solve(root,p,v1);
        solve(root,q,v2);
        reverse(v1.begin(),v1.end());
        reverse(v2.begin(),v2.end());
        int i,n1=v1.size(),n2=v2.size();
        for(i=0;i<n1&&i<n2&&(v1[i]==v2[i]);i++){}
        for(int j=n1-1;j>=i-1;j--){string x= to_string(v1[j]);ans+=x;}
        for(int j=i;j<n2;j++){string x= to_string(v2[j]);ans+=x;}
        return ans;
    }
};

#########################################################################################################
//solution based on similar question (not working)
class Solution {
public:
    bool solve_start(TreeNode* root, int x,string& s,vector<int>& s2)
    {
        if(!root)return 0;
        if(root->val==x || solve_start(root->left,x,s,s2) || solve_start(root->right,x,s,s2))
        {
            s+="U";
            s2.push_back(root->val);
            return 1;
        }
        return 0;
    }
    bool solve_des(TreeNode* root, int x,string& s,vector<int>& s2)
    {
        if(!root)return 0;
        if(root->val==x){s2.push_back(root->val);return 1;}
        bool root_left=solve_des(root->left,x,s,s2);
        if(root_left){s+="L";s2.push_back(root->val);return 1;}
        bool root_right=solve_des(root->right,x,s,s2);
        if(root_right){s+="R";s2.push_back(root->val);return 1;}

        return 0;
    }
    string getDirections(TreeNode* root, int p, int q) {
         
        string ans="",v1="",v2="";
        vector<int> x,y;
        solve_start(root,p,v1,x);
        solve_des(root,q,v2,y);
        
        reverse(v1.begin(),v1.end());
        reverse(v2.begin(),v2.end());
        reverse(x.begin(),x.end());
        reverse(y.begin(),y.end());
        int i,n1=v1.size(),n2=v2.size();
        for(i=0;i<n1&&i<=n2&&x[i]==y[i];i++){}
        for(int j=n1-1;j>=i;j--)
        ans+=v1[j];
        for(int j=i-1;j<=n2;j++)
        ans+=v2[j]; 
        string xx=ans;
        return xx;
    }
};
