######################################################################################################################
T.C : O(2 * N) //finding both path + O(N) //for finding first mismatch node
S.C : O(H) //for recusive stack + O(2 * N) //for storing both path

code:
class Solution {
public:
    bool solve(TreeNode* root, TreeNode* x,vector<TreeNode*>& v)
    {
        if(!root)return 0;
        if(root==x){v.push_back(root);return 1;}
        bool root_left=solve(root->left,x,v);
        if(root_left){v.push_back(root);return 1;}
        bool root_right=solve(root->right,x,v);
        if(root_right){v.push_back(root);return 1;}

        return 0;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> v1,v2;
        solve(root,p,v1);
        solve(root,q,v2);
        int i;
        reverse(v1.begin(),v1.end());
        reverse(v2.begin(),v2.end());
        int n=v1.size(),n2=v2.size();
        for(i=0;i<n&&i<n2&&(v1[i]==v2[i]);i++);
        TreeNode* ans=v1[i-1];
        return ans;
    }
};

######################################################################################################################
T.C : O(N)
S.C : O(H)

code:
class Solution {
public:
    TreeNode* LCA(TreeNode* root, int p, int q) {
        if (!root || root->val == p || root->val == q) return root;
        
        TreeNode* left = LCA(root->left, p, q);
        TreeNode* right = LCA(root->right, p, q);
        
        if (left && right) return root;
        return (left != NULL) ? left : right;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* ans=LCA(root,p->val,q->val); 
        return ans;
    }
};

######################################################################################################################
