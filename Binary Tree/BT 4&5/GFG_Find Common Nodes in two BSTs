################################################################################################################################
first approach: comparing inorder of both bst ;
T.C: O(N1 + N2)
S.C:O(H1+H2)for recusive call stack + O(N1+N2) for storing inorder + O(X) for storing common node

################################################################################################################################
CODE:

class Solution
{
    public:
    void inorder(Node* r,vector<int>& v)
    {
        if(!r)return ;
        inorder(r->left,v);
        v.push_back(r->data);
        inorder(r->right,v);
    }
    //Function to find the nodes that are common in both BST. 
    vector <int> findCommon(Node *root1, Node *root2)
    {
     //Your code here
     vector<int> v1,v2,ans;
     inorder(root1,v1);
     inorder(root2,v2);
     int n=v1.size(),m=v2.size();
     for(int i=0,j=0;i<n&&j<m;)
     {
         if(v1[i]==v2[j])
         {
             ans.push_back(v1[i]);
             i++;
             j++;
         }
         else if(v1[i]>v2[j])j++;
         else i++;
     }
     return ans;
    }
};
################################################################################################################################
