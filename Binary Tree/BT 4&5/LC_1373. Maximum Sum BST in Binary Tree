##############################################################################################################################
First approach: traverse each node if it is valid BST then store it sum temporarily and maxx sum;
T.C : O(N^2)
S.C : O(H)

##############################################################################################################################
CODE:

class Solution { 
public:
    int ans=0;
    bool isBst(TreeNode* r,int minn,int maxx)
    {
        if(!r)return 1;
        if(r->val<=minn || r->val>=maxx)return 0;
        return isBst(r->left,minn,r->val) && isBst(r->right,r->val,maxx);
    }
    int cal_bst_sum(TreeNode* r)
    {
        if(!r)return 0;
        return r->val + cal_bst_sum(r->left) + cal_bst_sum(r->right);
    }
    int maxSumBST(TreeNode* root){ 
        if(!root)return 0;
        if(isBst(root,INT_MIN,INT_MAX)){
        ans= max(ans,max(0,cal_bst_sum(root))); } 
        maxSumBST(root->left);
        maxSumBST(root->right);
        return ans; 
    }
};
end up to TLE for last largest test case
##############################################################################################################################
Optimise approach ...
