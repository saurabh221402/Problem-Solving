 class Solution {
public:
    bool check(vector<int>& v,int penalty,int mO)
    {
        int c=0;
        for(auto x:v)
        {
//all value should less then equal to penalty valuee
//if it is greator then then penalty value then count the number of operation required to make it less than penalty value
            c+=((x-1)/penalty);
        }
//if total operation performed is less then equal to given maxOperation value then this penalty value can be potential answer
        if(c<=mO)
        return 1;
        return 0;
    }
    int minimumSize(vector<int>& nums, int mO) {
        //bounding search space for binary search
        int i=1,j=*max_element(nums.begin(),nums.end()),ans=j;

        while(i<=j)
        {
            int mid=i+(j-i)/2;//testing penalty value
//checking is it possible to get panalty value equal to mid value after applying max operation give
            if(check(nums,mid,mO))
            {
//if poossible then store the potential answer and check for lower penalty
                ans=mid;
                j=mid-1;
            }
            else
            {
//if not possible then check for high penalty value
                i=mid+1;
            }
        }
        return ans;
    }
};
