#include <numeric>

bool check(vector<int>& v,long long day,int k)
{
    long long temp=0;
    int c=1;
    for(auto x:v)
    { 
        if(temp+x<=day)
        {
            temp+=x; 
        }
        else
        {
            temp=x;
            c++;
        }
    }
   // cout<<day<<" "<<c<<" ";
    return c<=k;
}

int findLargestMinDistance(vector<int> &boards, int k)
{
    //    this problem can solve using binary search 
    //first we find the search space : minimum time should be max size of board in board list and 
    //max time can be the max(sum of lenght of all board)

    long long i=*max_element(boards.begin(),boards.end()),j= accumulate(boards.begin(),boards.end(),0),ans=1;

    while(i<=j)
    {
        int mid=i+(j-i)/2;     //max adjecent size 
        if(check(boards,mid,k))     //checkIsPossibleToPaintIn Mid day using k painter
        {
            //if yes then store potential answer and check for smaller day
            ans=mid;
            j=mid-1;
        }
        else
        {
            i=mid+1;
        }
    }

    return ans;

}
