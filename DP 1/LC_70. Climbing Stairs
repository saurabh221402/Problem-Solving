################################################################################################################################################################################
memoization :
T.C: O(2*N)
S.C: O(2*N)

Code:
class Solution {
private: 
    int memo(int n,int cache[])
    {
        if(n==0||n==1)return 1;
        if(cache[n]!=-1)return cache[n];
        return cache[n]=memo(n-1,cache)+memo(n-2,cache);
    }
public:
    int climbStairs(int n) {
        int cache[n+1];
        fill(cache,cache+n+1,-1);
        return memo(n,cache);
    }
};
################################################################################################################################################################################
Tabulation :
T.C: O(N)
S.C: O(N)

Code:
class Solution { 
public:
    int climbStairs(int n) {
        int cache[n+1]; 
        cache[0]=0,cache[1]=1,cache[2]=2;
        for(int i=3;i<=n;i++)
        {
            cache[i]=cache[i-1]+cache[i-2];
        }
        return cache[n];
    }
};
################################################################################################################################################################################
Optimise tabulation:
T.C: O(N)
S.C: O(1)

Code:
class Solution {
public:
    
    int climbStairs(int n) {
        int a,b,c;
        a=1;
        b=2;
        if(n==1||n==2)
        return n;
        for(int i=3;i<=n;i++)
        {
            c=a+b;
            a=b;
            b=c;
        }
        return c;
    }
};
################################################################################################################################################################################
