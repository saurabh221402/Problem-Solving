##############################################################################################################################
Memoization leading to TLE

CODE1.0: using map

#include<bits/stdc++.h>
using namespace std;

// Custom hash function for pair<int, int>
struct hash_pair {
    template <class T1, class T2>
    size_t operator()(const pair<T1, T2>& p) const {
        auto hash1 = hash<T1>{}(p.first);
        auto hash2 = hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};

unordered_map<pair<int,int>,int,hash_pair> dp;

int solve(vector<int>& v,int x,int i)
{
    if(x==0)return 0; 
    if(i==0)return INT_MAX-1;

    if(dp.find({x,i})!=dp.end())return dp[{x,i}];

    if(x-v[i-1]>=0)
    {
        return dp[{x,i}] = min(1+solve(v,x-v[i-1],i),solve(v,x,i-1));
    }
    else
    {
        return dp[{x,i}] = solve(v,x,i-1);
    }
}

int main()
{
    int n,x,temp;
    cin>>n>>x;
    vector<int> coins;
    for(int i=0;i<n;i++)
    {
        cin>>temp;
        coins.push_back(temp);
    }
    
    cout<< solve(coins,x,n)<<endl;
    return 0;
}
 
CODE1.1 : using vector

#include<bits/stdc++.h>
using namespace std;

int solve(vector<int>& v,int x,int i,vector<vector<int>>& dp)
{
    if(x==0)return 0; 
    if(i==0)return INT_MAX-1;

    if(dp[i][x]!=-1)return dp[i][x];

    if(x-v[i-1]>=0)
    {
        return dp[i][x] = min(1+solve(v,x-v[i-1],i,dp),solve(v,x,i-1,dp));
    }
    else
    {
        return dp[i][x] = solve(v,x,i-1,dp);
    }
}

int main()
{
    int n,x,temp;
    cin>>n>>x;
    vector<int> coins;
    for(int i=0;i<n;i++)
    {
        cin>>temp;
        coins.push_back(temp);
    }
    vector<vector<int>> dp(n+1,vector<int> (x+1,-1));
    int ans=solve(coins,x,n,dp);
    if(ans==INT_MAX-1)cout<<-1;
    else
    cout<<ans<<endl;
    return 0;
}
##############################################################################################################################
Tabulation -> AC

CODE 2:

#include<bits/stdc++.h>
using namespace std;

int solve(vector<int>& v,int x,int n)
{
    vector<vector<int>> dp(n+1,vector<int> (x+1,-1)); 
    //initialising dp table
    for(int i=0;i<=n;i++)dp[i][0]=0;
    for(int i=0;i<=x;i++)dp[0][i]=INT_MAX-1; 

    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=x;j++)
        {
            if(j-v[i-1]>=0)
            { 
                dp[i][j] = min(1+dp[i][j-v[i-1]],dp[i-1][j]);
            }
            else
            {
                dp[i][j] = dp[i-1][j];
            }
        }
    }  
    return dp[n][x];
}

int main()
{
    int n,x,temp;
    cin>>n>>x;
    vector<int> coins;
    for(int i=0;i<n;i++)
    {
        cin>>temp;
        coins.push_back(temp);
    }
    
    int ans=solve(coins,x,n);
    if(ans==INT_MAX-1)cout<<-1;
    else
    cout<<ans<<endl;
    return 0;
}
##############################################################################################################################
