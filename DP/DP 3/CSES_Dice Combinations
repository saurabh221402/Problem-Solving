###################################################################################################################
Recursive approach: 
T.C : O(6^n)

CODE:
#include <bits/stdc++.h>
using namespace std;
int solve(int n)
{
    if(n==0)return 1;
    if(n<0)return 0;
    return solve(n-1)+solve(n-2)+solve(n-3)+solve(n-4)+solve(n-5)+solve(n-6);
}
int main() {
    int n;
    cin>>n;
    int ans=solve(n);
    cout<<ans;
    return 0;
}
###################################################################################################################
Memoization :
T.C : O(N)
S.C : O(N)

CODE:  
#include <bits/stdc++.h>
using namespace std;
int mod=1000000007;
long long solve(int n,vector<int>& dp)
{
    if(n==0)return 1;
    if(n<0)return 0;
    
    if(dp[n]!=-1)return dp[n]%mod;
    
    return dp[n] = (solve(n-1,dp)+solve(n-2,dp)+solve(n-3,dp)+solve(n-4,dp)+solve(n-5,dp)+solve(n-6,dp))%mod;
}
int main() {
    int n;
    cin>>n;
    vector<int> dp(n+1,-1);
    int ans=solve(n,dp);
    cout<<ans;
    return 0;
}
###################################################################################################################
Tabulation:

  
#include <bits/stdc++.h>
using namespace std;
int mod=1000000007; 
int main() {
    int n;
    cin>>n;
    vector<int> dp(n+1);
    dp[0]=1;
    dp[1]=1;
    
    for(int i=2;i<=n;i++)
    {
        long long temp=0;
        for(int j=i-1;j>=0&&j>=i-6;j--)
        {
            temp=(temp+dp[j])%mod;
        }
        dp[i]=(temp)%mod;
    }
     
    cout<<dp[n];
    return 0;
}
###################################################################################################################


