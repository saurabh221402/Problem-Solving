######################################################################################################################
Recursive solution :

class Solution {
public:
    
    int solve(vector<int>& v,int t,int n)
    {
        if(n==0)
        return 0; 

        if(v[n-1]<t)
        { 
            return max(1+solve(v,v[n-1],n-1),solve(v,t,n-1));
        }
        else
        {
            return solve(v,t,n-1);
        }
    }
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size(); 
        return solve(nums,INT_MAX,n);
    }
};

######################################################################################################################
Memoization solution :


class Solution {
public:
    
    int solve(vector<int>& v,int t,int n,vector<vector<int>>& dp,int minn)
    {
        if(n==0)
        return 0;

        if(dp[n][t-minn]!=-1)
        return dp[n][t-minn];
        if(v[n-1]<t)
        { 
            return dp[n][t-minn]=max(1+solve(v,v[n-1],n-1,dp,minn),solve(v,t,n-1,dp,minn));
        }
        else
        {
            return dp[n][t-minn]=solve(v,t,n-1,dp,minn);
        }
    }
    int lengthOfLIS(vector<int>& nums) {
        int t,n=nums.size(),maxx=-10001,minn=10001;
        for(int i=0;i<n;i++)
        {
            maxx=max(maxx,nums[i]);
            minn=min(minn,nums[i]);
        } 
        int size=maxx-minn+1;
        t=maxx+1;
        vector<vector<int>> dp(n+1,vector<int> (size+1,-1));
        return solve(nums,t,n,dp,minn);
    }
};
######################################################################################################################
Tabulation solution :

class Solution { 
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size(),ans=0;
        vector<int> dp(n, 1);
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < i; ++j)
            {
                if (nums[i] > nums[j] && dp[i] < dp[j] + 1)
                    dp[i] = dp[j] + 1;
            }
            ans=max(ans,dp[i]);
        }
        return ans;
    }
};
######################################################################################################################
