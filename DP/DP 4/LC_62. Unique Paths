##############################################################################################################################
Memoization:

class Solution {
private:
    int solve(int m,int n,vector<vector<int>>& dp)
    {
        if(m==1||n==1)return 0;
        if(dp[m][n]!=-1)return dp[m][n];
        return dp[m][n] = 1+solve(m-1,n,dp)+solve(m,n-1,dp);
    }
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int> (n+1,-1));
        return 1+solve(m,n,dp);
    }
};

##############################################################################################################################
Tabulation:

class Solution { 
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int> (n+1,0)); 
        for(int i=2;i<=m;i++)
        {
            for(int j=2;j<=n;j++)
            {
                dp[i][j]=1+dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m][n]+1;
    }
};
