class Solution {
public:
    int tabulation(string text1,string text2,vector<vector<int>>& dp)
    {
        int n=text1.size(),m=text2.size();

        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(text1[i-1]==text2[j-1]) dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }
    string fetchLCS(string str1,string str2,vector<vector<int>>& dp)
    {
        string s="";
	    int i=str1.size(),j=str2.size();
	    while(i!=0 && j!=0)
	    {
	    	if(str1[i-1]==str2[j-1])
	    	{ 
	    		s+=str1[i-1];
	    		i--;
	    		j--;
	    	}
	    	else
	    	{
	    		if(dp[i-1][j]>dp[i][j-1])
	    		{
	    			i--;
	    		}
	    		else
	    		{
	    			j--;
	    		}
	    	}
	    }
	    reverse(s.begin(),s.end());
        return s;
    }
    string supersequence(string s,string str1,string str2)
    {
        string ans="";
        int k=0,j=0,n=str1.size(),m=str2.size();
        for(int i=0;i<s.size();i++,j++,k++)
        {
            while(j<n && s[i]!=str1[j])
            {
                ans+=str1[j];
                j++;
            }
            while(k<m && s[i]!=str2[k])
            {
                ans+=str2[k];
                k++;
            }
            ans+=s[i];
        } 
        while(j<n)
        {
            ans+=str1[j];
            j++;
        }
        while(k<m )
        {
            ans+=str2[k];
            k++;
        }
        return ans;
    }
    string shortestCommonSupersequence(string str1, string str2) {
        int n=str1.size(),m=str2.size();
        vector<vector<int>> dp(n+1,vector<int> (m+1,0));//it is use find the path of lcs help to fetch lcs
        int lcs_Size=tabulation(str1,str2,dp);
        //int supersequenceSIZE = lcs_Size + (n - lcs_Size) + (m - lcs_Size); 
        string lcs_String = fetchLCS(str1,str2,dp); //lcs
        return supersequence(lcs_String,str1,str2); //supersequence
    }
};
