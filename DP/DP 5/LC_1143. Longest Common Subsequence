class Solution {
private:

//It has the same time complexity as memoization,O(n×m), but it doesn't use recursion so, doesn't have the overhead of function calls.
    int tabulation(string text1,string text2)
    {
        int n=text1.size(),m=text2.size();
        vector<vector<int>> dp(n+1,vector<int> (m+1,0));

        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(text1[i-1]==text2[j-1]) dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }

//By storing intermediate results, it reduces the time complexity to  O(n×m)
    int memoization(string text1, string text2,int n,int m,vector<vector<int>>& dp)
    {
        if(n==0 || m==0)return 0;
        if(dp[n][m]!=-1)return dp[n][m];
        if(text1[n-1]==text2[m-1])return dp[n][m] = 1 + memoization(text1,text2,n-1,m-1,dp);
        else return dp[n][m] = max(memoization(text1,text2,n-1,m,dp),memoization(text1,text2,n,m-1,dp));
    }

//This approach has exponential time complexity, as it explores all possible combinations of characters in both texts.
    int recursion(string text1, string text2,int n,int m)
    {
        if(n==0 || m==0)return 0; 
        if(text1[n-1]==text2[m-1])return 1 + recursion(text1,text2,n-1,m-1);
        else return max(recursion(text1,text2,n-1,m),recursion(text1,text2,n,m-1));
    }

public:
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size(),m=text2.size();
        vector<vector<int>> dp(n+1,vector<int> (m+1,-1));
        
        return tabulation(text1,text2);
        return recursion(text1,text2,n,m);
        return memoization(text1,text2,n,m,dp);
    }
};
