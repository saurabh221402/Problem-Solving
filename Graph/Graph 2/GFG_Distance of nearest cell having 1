########################################################################################################################################
Intution: store all 1's position in queue and call bfs simultaneously maintaining distance 2d vector;
T.C : O(N*M) bfs
S.C : O(N*M) maintaining distance vector;
########################################################################################################################################
CODE:
class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    // Code here
	    int n=grid.size(),m=grid[0].size();
	    vector<vector<int>> dist(n,vector<int> (m,-1));
	    queue<pair<int,int>> q;
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<m;j++)
	        {
	            if(grid[i][j]==1)
	            {
	                q.push({i,j});
	                dist[i][j]=0;
	            }
	        }
	    }
	    while(!q.empty())
	    {
	        int x=q.front().first,y=q.front().second;
	        int dis=dist[x][y];
	        int a[]={1,-1,0,0};
	        int b[]={0,0,1,-1};
	        for(int k=0;k<4;k++)
	        {
	            int dx=a[k]+x,dy=b[k]+y;
	            if(dx>=0&&dx<n&&dy>=0&&dy<m&&dist[dx][dy]==-1)
	            {
	                q.push({dx,dy});
	                dist[dx][dy]=dis+1;
	            }
	        }
	        q.pop();
	    }
	    return dist;
	}
};
########################################################################################################################################
