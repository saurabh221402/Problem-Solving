#############################################################################################################################
DFS:

class Solution {
public:
    void dfs(vector<vector<char>>& v,int i,int j){
        if(i<0||i>=v.size()||j<0||j>=v[0].size()||v[i][j]!='1')return ;
        v[i][j]='0';

        dfs(v,i,j+1);
        dfs(v,i,j-1);
        dfs(v,i+1,j);
        dfs(v,i-1,j);
    }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size(),m=grid[0].size(),c=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1'){dfs(grid,i,j);c++;}
            }
        }
        return c;
    }
};
#############################################################################################################################
BFS:

class Solution {
    private:
    void bfs(vector<vector<char>>& grid,vector<vector<int>>& visit,int i,int j)
    {
        visit[i][j]=1;
        int n=grid.size(),m=grid[0].size();
        queue<pair<int,int>> q;
        q.push({i,j}); 
        while(!q.empty())
        {
            int r=q.front().first,c=q.front().second;
            q.pop(); 
            int nr=r+1,nc=c;
            if(nr>=0&&nr<n&&nc>=0&&nc<m&&!visit[nr][nc]&&grid[nr][nc]=='1')
            {
                q.push({nr,nc});
                visit[nr][nc]=1; 
            }
            nr=r-1,nc=c;
            if(nr>=0&&nr<n&&nc>=0&&nc<m&&!visit[nr][nc]&&grid[nr][nc]=='1')
            {
                q.push({nr,nc});
                visit[nr][nc]=1; 
            }
            nr=r,nc=c-1;
            if(nr>=0&&nr<n&&nc>=0&&nc<m&&!visit[nr][nc]&&grid[nr][nc]=='1')
            {
                q.push({nr,nc});
                visit[nr][nc]=1; 
            }
            nr=r,nc=c+1;
            if(nr>=0&&nr<n&&nc>=0&&nc<m&&!visit[nr][nc]&&grid[nr][nc]=='1')
            {
                q.push({nr,nc});
                visit[nr][nc]=1; 
            }
        }
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size(),m=grid[0].size(),c=0;
        vector<vector<int>> visit(n,vector<int> (m,0)); 

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
                    if(!visit[i][j])
                    {
                        bfs(grid,visit,i,j);
                        c++;
                    }
                }
            }
        }
        return c;

    }
};
#############################################################################################################################
