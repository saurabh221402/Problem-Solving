
class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> output(n);
        vector<set<int>> ans(n);
        vector<int> indegree(n,0);
        queue<int> q;
        vector<vector<int>> adj(n);

        //calculating indegree of each nodes
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            indegree[edges[i][1]]++;
        }
        //storing all node whichn have no ancestor(indegree=0) to queue
        for(int i=0;i<n;i++)if(indegree[i]==0)q.push(i);
        while(!q.empty()){
            int f=q.front();
            q.pop();
            for(int i=0;i<adj[f].size();i++){
                for(auto it:ans[f]){
                    ans[adj[f][i]].insert(it);
                } 
                ans[adj[f][i]].insert(f);
                indegree[adj[f][i]]--;
                if(indegree[adj[f][i]]==0){
                    cout<<adj[f][i]<<endl;
                    q.push(adj[f][i]);
                }

            }
        }
        for(int i=0;i<n;i++){
            for(auto it: ans[i]){
                output[i].push_back(it);
            }
        }
        return output; 
    }
};
