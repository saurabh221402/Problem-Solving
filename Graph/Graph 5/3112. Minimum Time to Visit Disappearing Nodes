 class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& ed, vector<int>& dis) {
         vector<int>& di= dis;
        
        unordered_map<int, vector<pair<int, int>>> adj_map;
        for (auto x : ed) {
            int u = x[0], v = x[1], w = x[2];
            if (u != v) {
                adj_map[u].push_back({v, w});
                adj_map[v].push_back({u, w});
            }
        }

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; 
        pq.push({0, 0});

        vector<int> dist(n, INT_MAX);
        //dist[0]=0;//source

        while (!pq.empty()) {
            pair<int,int> p = pq.top();
            pq.pop();
            int curr_dis=p.first;
            int curr_node=p.second;
            if(curr_dis>dist[curr_node] || curr_dis>=dis[curr_node])continue;
            dist[curr_node]=curr_dis;
            for(auto x:adj_map[curr_node])
            {
                int adj_node=x.first;
                int wt=x.second;
                if(curr_dis+wt<dist[adj_node])
                {
                    pq.push({curr_dis+wt,adj_node});
                }
            }
        }

        for (int i = 0; i < n; ++i) {
            if (dist[i] == INT_MAX) {
                dist[i] = -1;
            }
        }

        return dist;
    
    }
};
