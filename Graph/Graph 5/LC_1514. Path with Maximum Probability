Approach: BFS

class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int,double>>> adj(n);
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        
        vector<double> prob(n,0);
        queue<pair<int,double>> q;
        q.push({start,1});

        while(!q.empty())
        {
            auto [node,curr_prob]=q.front();
            for(auto x:adj[node])
            {
                double new_prob=curr_prob * x.second;
                if(new_prob>prob[x.first])
                {
                    prob[x.first]=new_prob;
                    q.push({x.first,new_prob});
                }
            }
            q.pop();
        }
        return prob[end];
    }
};
