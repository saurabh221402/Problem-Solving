class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        int len=times.size(),time=0;
        vector<vector<pair<int,int>>> adj(n);

        for(int i=0;i<len;i++)
        { 
            adj[times[i][0]-1].push_back({times[i][1]-1,times[i][2]});
        }

        vector<int> dis(n,INT_MAX);
        dis[k-1]=0;
        queue<pair<int,int>> q;
        q.push({k-1,0});

        while(!q.empty())
        {
            int node=q.front().first;
            int dist=q.front().second;
            for(auto x:adj[node])
            {
                if(dis[x.first]>dist+x.second)
                {
                    dis[x.first]=dist+x.second;
                    q.push({x.first,dist+x.second});
                }
            }
            q.pop();
        }
        for(auto x:dis)time=max(time,x);
        if(time==INT_MAX)return -1;
        return time;
    }
};
