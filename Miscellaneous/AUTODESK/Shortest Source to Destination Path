Using Bfs


class Solution {
  public:
    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y) {
        // edge case
        if(!A[0][0])return -1;
        //initialisation
        queue<pair<int,int>> q;
        q.push({0,0});
        //distance vector
        vector<vector<int>> dist(N,vector<int> (M,INT_MAX));
        dist[0][0]=0;
        //direction of movement
        int a[] = {1,0,-1,0};
        int b[] = {0,-1,0,1};

        //bfs 
        while(!q.empty())
        {
            pair<int,int> p=q.front();
            int x=p.first,y=p.second; 
            int dis=dist[x][y];

            //if we reach destination then we exit(this logic is valid when all wt are same(here 1))
            if (x == X && y == Y) return dist[x][y]; 
            
            for(int i=0;i<4;i++)
            {
                int dx=x+a[i],dy=y+b[i];
                
                if(dx>=0 && dx<N && dy>=0 && dy<M && A[dx][dy] && dis+1 < dist[dx][dy])
                {
                    dist[dx][dy] = dis+1;
                    q.push({dx,dy});
                }
            }
            q.pop();
        }
        return (dist[X][Y]==INT_MAX?-1:dist[X][Y]);
    }
};
