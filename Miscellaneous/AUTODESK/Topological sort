dfs
T.C: O(V + E) //V for reversal and E apply dfs
S.C: O(3*V)  // V for visited array , V for toposort array , V for recursive stack

CODE:
class Solution
{
	public:
	vector<int> topo;
	void dfs(vector<int> adj[],int node,vector<int>& topo,vector<int>& vis)
	{
	    vis[node]=1;
	    
	    for(auto x:adj[node])
	    {
	        if(!vis[x])
	        {
	            vis[x]=1;
	            dfs(adj,x,topo,vis);
	        }
	    }
	    topo.push_back(node);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> vis(V,0); 
	    
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])
	        {
	            dfs(adj,i,topo,vis);
	        }
	    }
	    reverse(topo.begin(),topo.end());
	   // for(auto x:topo)
	   // cout<<x<<" ";
	    return topo;
	}
};
