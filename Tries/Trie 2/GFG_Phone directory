##############################################################################################################################
T.C: 
S.C:
##############################################################################################################################
CODE:

class Solution{ 
public:
    struct Trie{
        struct Trie *children[26];
        set<string> v;
        bool isEnd;
        
        Trie(){
            for(int i=0;i<26;i++){children[i]=NULL;}
            v;
            isEnd=0;
        }
    };
    void insert(Trie *root,string s)
    {
        Trie* temp=root; 
        int len=s.size();
        for(int i=0;i< len;i++)
        {
            int idx=s[i]-'a'; 
            
            if(!temp->children[idx])
            {
                temp->children[idx]=new Trie();
            }
            temp=temp->children[idx];
            temp->v.insert(s);
        }
        temp->isEnd=1;
    }
    vector<vector<string>> search(Trie *root,string s)
    {
        Trie* temp=root;
        vector<vector<string>> ans;
        int i;
        
        for(i=0;i<s.size();i++)
        {
            int idx=s[i]-'a';
            if(!temp->children[idx]){ break;}
            temp=temp->children[idx];
            vector<string> hold; 
            for(auto x:temp->v)
            {
                hold.push_back(x);
            }
            ans.push_back(hold);
        }
        while(i<s.size()){ans.push_back({"0"});i++;}
        return ans;
    }
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    { 
        Trie* root=new Trie();
       // sort(contact.begin(),contact.end());
        for(int i=0;i<n;i++)
        { 
            insert(root,contact[i]);
        }
         vector<vector<string>> ans=search(root,s);
        return ans;
    }
};
