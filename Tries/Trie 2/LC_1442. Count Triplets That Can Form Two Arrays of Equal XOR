########################################################################################################################
T.C: O(32*2*N)
S.C: O(32*2*N)
########################################################################################################################
CODE:

class Solution {
public:
    struct Trie{
        struct Trie *child[2];
        int count;
        int index_sum;
        Trie()
        {
            child[0]=NULL,child[1]=NULL;
            count =0;
            index_sum=0;
        }
    };
    void insert(Trie* root,int num,int idx)
    {
        Trie* temp=root;
        for(int i=31;i>=0;i--)
        {
            int bit=(num>>i) & 1;

            if(!temp->child[bit]) 
            {
                temp->child[bit]=new Trie();
            }
            temp=temp->child[bit];
        }
        temp->count++;
        temp->index_sum+=idx;
    }
    int search(Trie* root,int x_num,int idx)
    {
        Trie* temp=root;
        for(int i=31;i>=0;i--)
        {
            int bit=(x_num>>i) & 1;
            if(temp->child[bit]==NULL)return 0;
            temp=temp->child[bit];
        }
      // cout<<idx<<". "<<temp->count<<" "<<temp->index_sum<<" .";
        return (temp->count * idx) - (temp->index_sum);
    }
    int countTriplets(vector<int>& arr) {
        int temp,pre_xor=0,ans=0,n=arr.size();
        Trie* root=new Trie();
        for(int i=0;i<n;i++)
        {
            temp=arr[i];
            insert(root,pre_xor,i);
            pre_xor^=temp;
            //cout<<pre_xor<<" ";
            ans+=search(root,pre_xor,i);
            //cout<<ans<<" ";
        }
        return ans;
    }
};
########################################################################################################################
