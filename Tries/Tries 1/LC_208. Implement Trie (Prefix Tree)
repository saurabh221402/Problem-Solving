##################################################################################################################################################################
T.C : insert/search O(No. of key * lenght of key) 
S.C : O(no. of key * lengh_of_key * 26)
##################################################################################################################################################################
CODE:

class Trie {
public:
    struct TrieNode
    {
        TrieNode *children[26];
        bool isEnd;
    };
    //global root
    struct TrieNode* root;

    Trie() {
          root=getNode();
    }

    struct TrieNode* getNode(){
        struct TrieNode* node=new TrieNode;
        node->isEnd=false;
        for(int i=0;i<26;i++)
        {
            node->children[i]=NULL;
        }
        return node;
    };
    
    void insert(string word) {
        struct TrieNode* temp=root;
        for(int i=0;i<word.size();i++)
        {
            int idx=word[i]-'a';
            if(!temp->children[idx])
            {
                temp->children[idx]=getNode();
            }
            temp=temp->children[idx];
        }
        temp->isEnd=true;
    }
    
    bool search(string word) {
        struct TrieNode* temp=root;
        for(int i=0;i<word.size();i++)
        {
            int idx=word[i]-'a';
            if(!temp->children[idx])return false;
            temp=temp->children[idx];
        }
        return temp->isEnd;
    }
    
    bool startsWith(string prefix) {
        struct TrieNode* temp=root;
        for(int i=0;i<prefix.size();i++)
        {
            int idx=prefix[i]-'a';
            if(!temp->children[idx])return false;
            temp=temp->children[idx];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

##################################################################################################################################################################
