########################################################################################################################
T.C : O(No. of word * lenght of word * 26)
S.C : O(No. of word * lenght of word * 26)
########################################################################################################################
CODE:

class Solution {
private: 
    struct TrieNode
    {
        struct TrieNode *children[26];
        bool isEnd;
        int count;
        TrieNode()
        {
            for(int i=0;i<26;i++)
            children[i]=NULL;
            isEnd=false;
            count =0;
        }
    };

    void insert(TrieNode* root,string s)
    {
        TrieNode* temp=root; 
        for(int i=0;i<s.size();i++)
        {
            int idx=s[i]-'a'; 
            if(!temp->children[idx])
            {
                temp->children[idx]=new TrieNode();
            }
            temp->children[idx]->count+=1;
            temp=temp->children[idx];
        }
        temp->isEnd=true;
    }
    int find(TrieNode* root,string s)
    {
        int c=0;
        TrieNode *temp=root;
        for(int i=0;i<s.size();i++)
        {
            int idx=s[i]-'a';
            if(!temp->children[idx])return c;
            c+=temp->children[idx]->count;
            temp=temp->children[idx];
        }
        return c;
    }

public:
    vector<int> sumPrefixScores(vector<string>& words) {
        vector<int> ans;
        TrieNode* root=new TrieNode();
        for(int i=0;i<words.size();i++)
        insert(root,words[i]);
        for(int i=0;i<words.size();i++)
        ans.push_back(find(root,words[i]));
        return ans;
    }
};
########################################################################################################################
