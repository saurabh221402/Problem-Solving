

class Solution {
public:
struct TriesNode{
        int size=INT_MAX;
        int index=-1;
        TriesNode* children[26];
};
void insert(TriesNode*root,string s,int pos,int i)
{ 
    TriesNode* temp=root;
    if(i <= temp->size){
        temp -> size = i;
        temp->index=pos;
        }
    for(int j = i - 1; j >= 0; j--) {
        int idx = (s[j] - 'a');
        if(temp -> children[idx] == NULL) {
            temp -> children[idx] = new TriesNode(i);
        } 
        temp = temp -> children[idx];
        if(i <= temp->size){ 
            temp -> size = i;
            temp->index=pos;
            }
    }
}
int search(TriesNode *root, string s) {
    TriesNode* temp = root;
    int n=s.size();
    for(int i = n - 1; i >= 0; i--) {
        int idx = s[i] - 'a';
        if(temp -> children[idx] == NULL) {
            return temp -> index;
        }
        temp = temp -> children[idx];
    }
    return temp -> index;
}
vector<int> stringIndices(vector<string>& wordsContainer, vector<string>& wordsQuery) {
    TriesNode *root = new TriesNode(0);
    int minn=INT_MAX,pos,n=wordsContainer.size();
    for(int i = n-1; i >=0 ; i--) {
        int n=wordsContainer[i].size();
        if(minn>=n){minn=n;pos=i;}
        insert(root, wordsContainer[i],i,n);
    }
    vector<int> ans;
    for(int i = 0; i < wordsQuery.size(); i++) {
        int x=search(root, wordsQuery[i]);
        ans.push_back((x==-1)?pos:x);
    }
    return ans;
}
};
