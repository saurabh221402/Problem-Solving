################################################################################################################
T.C :O(length of dictionary * size of each word * 26) insertion   + O(length of sentence) searching
S.C :O(length of dictionary * size of each word * 26) + O(length of sentence)
#################################################################################################################
CODE:

class Solution {
public:
    struct TrieNode{
        struct TrieNode *children[26]; 
        bool isEnd;
        TrieNode()
        {
            for(int i=0;i<26;i++)
            {
                children[i]=0;
                isEnd=0;
            } 
        }
    };
    void insert(TrieNode* root,string s)
    {
        TrieNode* temp=root;
        int n=s.size();
        for(int i=0;i<n;i++)
        {
            int idx=s[i]-'a';
            if(!temp->children[idx]){
                temp->children[idx]=new TrieNode(); 
            }
            temp=temp->children[idx];
        }
        temp->isEnd=1;
    }
    string search(TrieNode* root,string s)
    {
        TrieNode* temp=root;
        int n=s.size();
        string ans;
        for(int i=0;i<n;i++)
        {
            int idx=s[i]-'a';
            ans+=s[i];
            
            if(!temp->children[idx]){return s;} 
            temp=temp->children[idx];
            if(temp->isEnd)return ans;
        }
        return ans;
    }
    string replaceWords(vector<string>& dictionary, string sentence) {
        int n=dictionary.size(),m=sentence.size();
        TrieNode *root=new TrieNode();
        string ans="";
        for(int i=0;i<n;i++)
        {
            insert(root,dictionary[i]);
        }
        string temp="";
        for(int i=0;i<m;i++)
        {
            if(sentence[i]==' '){
            ans+=search(root,temp)+" ";
            temp="";
            }
            else temp+=sentence[i];
        }
        ans+=search(root,temp); 
        return ans;
    }
};
#################################################################################################################
